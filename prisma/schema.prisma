// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String
  image         String?
  emailVerified DateTime?
  profilePic    String?
  bioPic        String?
  coverPic      String?
  bio           String    @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  account       Account[]
}

model Collection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String   @db.ObjectId
  published Boolean  @default(false)
  order     String[] @default([])
}

model Painting {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  width         Int?
  height        Int?
  sizeUnit      String?
  showPrice     Boolean  @default(false)
  showSize      Boolean  @default(false)
  price         Int?
  description   String?
  userId        String   @db.ObjectId
  collectionIds String[] @db.ObjectId
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
